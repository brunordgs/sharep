// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  username      String    @unique
  emailVerified DateTime?
  image         String?
  isVerified    Boolean   @default(false)
  isCreator     Boolean   @default(false)
  bio           String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())

  accounts Account[]
  sessions Session[]
  social   Social?
  creator  Creator?
  projects Projects[]

  @@map("users")
}

model Creator {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  @@map("creators")
}

model Social {
  id        String   @id @default(cuid())
  website   String
  github    String
  twitch    String
  youtube   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  @@map("social")
}

model Projects {
  id          String @id @default(cuid())
  image       String?
  name        String
  description String
  url         String
  sourceName  String?
  sourceUrl   String?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@map("projects")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
