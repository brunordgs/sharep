generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String     @id @default(uuid())
  name          String
  email         String    @unique
  username      String     @unique
  emailVerified DateTime?
  image         String
  bio           String?
  isCreator     Boolean    @default(false)
  isVerified    Boolean    @default(false)
  isAdmin       Boolean    @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now())
  password      String?
  accounts      Account[]
  creator       Creator?
  projects      Project[]
  sessions      Session[]
  social        Social?

  @@map("users")
}

model Creator {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])

  @@map("creators")
}

model Social {
  id        String   @id @default(uuid())
  website   String?
  twitter   String?
  github    String?
  twitch    String?
  youtube   String?
  tiktok    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])

  @@map("socials")
}

model Project {
  id          String  @id @default(uuid())
  url         String
  name        String
  description String
  userId      String
  image       String?
  repo        String
  repoUrl     String
  user        User    @relation(fields: [userId], references: [id])

  @@map("projects")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
